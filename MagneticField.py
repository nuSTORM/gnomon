import math
import Geant4 as G4

class WandsToroidField(G4.G4MagneticField):
    "Toroid Field from Bob Wands simulation parameterization"

    def __init__(self, focus):
        G4.G4MagneticField.__init__(self)
        if focus == '+':
            self.sign = 1
        elif focus == '-':
            self.sign = -1
        elif focus == '0':
            self.sign = 0
        else:
            raise ValueError

    def PhenomModel(self, r, B0=1.53, B1=0.032, B2=0.64, H=0.28):
        """Fit to field map

        A phenomenological fit by Ryan Bayes (Glasgow) to a field map
        generated by Bob Wands (FNAL).  It assumes a 1 cm plate.  This is dated
        January 30th, 2012.  Not defined for r <= 0"""
        if r <= 0:
            raise ValueError
        field = B0 + B1*G4.m / r + B2 * math.exp(-1 * H * r / G4.m)
        return field

    def GetFieldValue(self, pos, time):
        bfield = G4.G4ThreeVector()

        # Set to zero, only change if r != 0 and sign != 0
        bfield.x = 0
        bfield.y = 0
        bfield.z = 0.
        
        if self.sign == 0:
            return bfield * G4.tesla

        # From Bob Wands, 1 cm plate, Jan. 30
        r = math.sqrt(pos.x ** 2 + pos.y ** 2)

        #  Ryan Bayes, March 15th, 2012, talk to Valencia grp.
        B0 = 1.36 # T
        B1 = 0.0406 # T m
        B2 = 0.8 # T
        H = 0.16 # 1/m

        if r != 0.0:
            B = self.sign * self.PhenomModel(r, B0, B1, B2, H)
            bfield.x = -1 * (pos.y / r) * B
            bfield.y =  1 * (pos.x / r) * B

        return bfield * G4.tesla
