import math

class Vertex():
    pass

class Edge():
    pass

class DAG():
    def __init__(self):
        self.graph = {}

    def CreateVertices(self, points):
        graph = {}

        for z, x in points:
            graph[(z,x)] = {}

        return graph
            
    def GetVertices(self, graph):
        return graph.keys()

    def CreateDirectedEdges(self, points, graph):
        for z0, x0 in points:

            for z1, x1 in points:
                if z1 > z0:
                    dz = z1 - z0
                    dx = x1 - x0
                    graph[(z0,x0)][(z1, x1)] = math.hypot(dz, dx)
                    
        return graph

    def CutLongEdges(self, graph, threshold=50.0):
        new_graph = {}

        for key, endpoints in graph.iteritems():
            new_graph[key] = {}
            for endpoint, distance in endpoints.iteritems():
                if distance < threshold:
                    new_graph[key][endpoint] = distance
        
        return new_graph
        
        
    def ProcessPoints(self, points):
        points = points.sort()

        graph = CreateVertices(points)
        CreateDirectedEdges(points, graph)
        
        i = 0

        for point in points:


            self.graph[point] = {}

            for vertex in graph.keys():
                z0, x0 = point
                z1, x1 = vertex

                if z1 == z0:
                    print 'same point, skip'
                
        


    
