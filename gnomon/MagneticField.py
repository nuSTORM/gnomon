import math
import Geant4 as G4
from gnomon.Configuration import RUNTIME_CONFIG as rc


class WandsToroidField(G4.G4MagneticField):
    "Toroid Field from Bob Wands simulation parameterization"

    def __init__(self, scale=1.0, B0=1.53, B1=0.032, B2=0.64, H=0.28):
        """Initial field map

        scale has the sign of the field.  Focus signal with scale = 1, focus
        background with scale = -1.  Have 80% field with scale = 0.8

        B0, B1, B2, and H are fit parameters.

        Default values from Ryan Bayes, March 15th, 2012, talk to Valencia grp.
        B0 = 1.36  # T
        B1 = 0.0406  # T m
        B2 = 0.8  # T
        H = 0.16  # 1/m

        Field to field map from Bob Wands, 1 cm plate, Jan. 30, 2012  
        """

        G4.G4MagneticField.__init__(self)

        self.scale = float(scale)

        self.B0 = B0
        self.B1 = B1
        self.B2 = B2
        self.H = H

        # Save field
        rc['field'] = self.scale


    def PhenomModel(self, r):
        """Fit to field map

        A phenomenological fit by Ryan Bayes (Glasgow) to a field map
        generated by Bob Wands (FNAL).  It assumes a 1 cm plate.  This is dated
        January 30th, 2012.  Not defined for r <= 0"""
        if r <= 0:
            raise ValueError
        field = self.B0 + self.B1 * G4.m / r + self.B2 * math.exp(-1 * self.H * r / G4.m)
        return field

    def GetFieldValue(self, pos, time):
        bfield = G4.G4ThreeVector()

        # Set to zero, only change if r != 0 and sign != 0
        bfield.x = 0
        bfield.y = 0
        bfield.z = 0.

        if self.scale == 0.0:
            return bfield * G4.tesla

        r = math.sqrt(pos.x ** 2 + pos.y ** 2)

        if r != 0.0:
            B = self.scale * self.PhenomModel(r)
            bfield.x = -1 * (pos.y / r) * B
            bfield.y = 1 * (pos.x / r) * B

        return bfield * G4.tesla
